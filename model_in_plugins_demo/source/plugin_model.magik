##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-09-03
## Date changed    : $Date$
## Revision        : $Rev$

_package user
$


_pragma(classify_level=basic, topic={demo})
def_slotted_exemplar(
	:plugin_model,
	{
		{:items, _unset},
		{:owner, _unset},
		{:embedded?, _unset}
	},
	:model )
$

_pragma(classify_level=basic, topic={demo})
_method plugin_model.new(_optional p_owner)
	_return _clone.init(p_owner)
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_private _method plugin_model.init(_optional p_owner)
	.owner << p_owner
	.items << property_list.new()
	.embedded? << _false 
	_return _self 
_endmethod
$

_pragma(classify_level=advanced)
_method plugin_model.build_embedded_gui( a_gui_container )
	## 
	## Builds the GUI embedded in some other window.
	##
	## A_GUI_CONTAINER - a panel, rowcol, tab_box, frame or any
	## other gui container.
	##
	## Sends _self.activate_in(a_gui_container) and
	## _self.on_activation().
	##
	## Returns the result returned by activate_in() which should be
	## the top level gui object.
	##
	.embedded? << _true
	.top_frame << a_gui_container.top_frame
	_return _super.build_embedded_gui( a_gui_container )
_endmethod
$

_pragma(classify_level=advanced)
_method plugin_model.quit(_optional cache?)
	_if .embedded?
	_then
		.top_frame << _unset
	_endif
	_return _super.quit(cache?)
_endmethod
$
