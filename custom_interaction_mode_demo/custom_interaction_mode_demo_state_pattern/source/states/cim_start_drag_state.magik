##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-10-05
## Date changed    : $Date$
## Revision        : $Rev$

_package user
$
#remex(:cim_start_drag_state)
$
_pragma(classify_level=basic, topic={demo})
def_slotted_exemplar(:cim_start_drag_state,
	{
		{:cable, _unset},
		{:cable_sectors, _unset}
	},
	:cim_base_state)
$


_pragma(classify_level=basic, topic={demo})
_method cim_start_drag_state.init(owner, cable, cable_sectors)
	_if cable_sectors _is _unset _then condition.raise(:error,:string,"Need sectors") _endif 
	.cable << cable
	.cable_sectors << cable_sectors
	_return _super.init(owner)
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method cim_start_drag_state.handle_start_drag_action(action,start_coord,end_coord,a_window)
	_self.start_drag(a_window, end_coord)
	new_state << cim_drag_state.new(.owner, .cable, .cable_sectors)
	_return new_state
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method cim_start_drag_state.start_drag(a_window)
	## invoked when the dragging start. Will xor the cable for the
	## last time to remove it from the screen and then the drag xor
	## will start.
	
	_self.xor_cable(a_window)
	_self.xor_drag_sectors(a_window)	
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_private _method cim_start_drag_state.xor_cable(a_window)
	.owner.xor_cable(a_window,.cable_sectors)
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_private _method cim_start_drag_state.xor_drag_sectors(a_window)
	.owner.xor_drag_sectors(a_window, .cable_sectors)
_endmethod
$


