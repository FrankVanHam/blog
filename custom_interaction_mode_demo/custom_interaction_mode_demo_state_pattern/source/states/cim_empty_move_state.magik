##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-10-05
## Date changed    : $Date$
## Revision        : $Rev$

_package user
$

#remex(:cim_empty_move_state)
$

_pragma(classify_level=basic, topic={demo})
## Move state while there is no cable yet.
def_slotted_exemplar(:cim_empty_move_state,
	{},
	:cim_base_state)
$



_pragma(classify_level=basic, topic={demo})
_method cim_empty_move_state.handle_move_action(action,start_coord,end_coord,a_window)

	(cable,sectors) << _self.move_and_find_cable(a_window, end_coord)
	_if cable _is _unset
	_then 
		new_state << _self
	_else
		new_state << cim_move_state.new(.owner, cable, sectors)
		new_state.xor_for_find(a_window)
		new_state << new_state.handle_move_action(action,start_coord,end_coord,a_window)
	_endif 
	_return new_state
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method cim_empty_move_state.move_and_find_cable(a_window, end_coord)
	## invoked on every move during the search for a cable. So this
	## better be fast.

	# chaining interaction_modes leads to cursor problems. So here
	# is a simple fix.
	.owner.fixup_cursor(a_window)
	
	(cable, sectors) << _self.find_cable(end_coord)
	
	_return cable, sectors
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_private _method cim_empty_move_state.find_cable(end_coord)
	_return .owner.finder.find_cable(end_coord)
_endmethod
$
