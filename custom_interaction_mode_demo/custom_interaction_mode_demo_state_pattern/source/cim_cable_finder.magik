##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-10-05
## Date changed    : $Date$
## Revision        : $Rev$

_package user
$


_pragma(classify_level=basic, topic={demo})
def_slotted_exemplar(:cim_cable_finder,
	{
		{:scanner, _unset},
		{:table_control, _unset}
	})
$

_pragma(classify_level=basic, topic={demo})
_method cim_cable_finder.new()
	_return _clone
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_private _method cim_cable_finder.scanner_and_tc()
	## Lazy build the scanner.
	_if .scanner _is _unset
	_then
		(.scanner, .table_control) << _self.build_scanner()
	_endif
	_return .scanner, .table_control
_endmethod
$


_pragma(classify_level=basic, topic={demo})
_private _method cim_cable_finder.build_scanner()
	_local ev << gis_program_manager.databases[:electricity]
	_local fds << ev.collections[:cable].field(:centreline).mapped_geometry_fields
	_local scanner << ev.geometry_scanner(:chain, _true, ev.world)
	_local table_control << ev.table_control_for(fds)
	_return scanner, table_control
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method cim_cable_finder.find_cable(end_coord)
	## Find the cable. For best pefrormance uses a private cached scanner.
	_local (scanner, tc) << _self.scanner_and_tc()
	_local radius << 1000
	_local box << bounding_box.new_centred(end_coord.x, end_coord.y, radius)
	_for i_geom _over scanner.elements_within_coord_box(box, tc)
	_loop
		_if i_geom.distance_to_within?(end_coord,radius)
		_then 
			_return i_geom.rwo, i_geom.sectors
		_endif 
	_endloop
_endmethod
$


_pragma(classify_level=basic, topic={demo})
_method cim_cable_finder.discard()
	_if .scanner _isnt _unset
	_then
		.scanner.close()
	_endif
_endmethod
$
